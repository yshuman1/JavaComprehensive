import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Scanner;

public class Validator {
	public static int validChoice(Scanner sc, String menu) {
		while (true) {
	  		  System.out.print(menu);
	  		  if (sc.hasNextInt()) {
	  			  int choice = sc.nextInt();
	  			  if (choice >= 1 && choice <= 5) {
	  				  return choice;
	  			  }
	    	  }   
	  		  System.out.println("\nError! Invalid value. Try again.");
	  		  sc.nextLine();
  	  	}
    }

	public static String validFile(Scanner sc, ArrayList<String> listNames, ArrayList<Thread> listRunners) {
		System.out.println("Enter text file name: ");
		if (sc.hasNextLine()) {
			String fileName = sc.nextLine();
			File textFile = new File(fileName);
			System.out.println(fileName);
			//read from a text file
			try (BufferedReader inText = new BufferedReader(new FileReader(textFile))) {
				String line;
				while ((line = inText.readLine()) != null) {
					System.out.println("Read from the file:\n" + line);
					boolean valid = createLists(listNames, listRunners, line);
				}
			inText.close();
			} catch (IOException e) {
				e.printStackTrace();
			} 
		}
		return null;
	}

	private static boolean createLists(ArrayList<String> listNames, ArrayList<Thread> listRunners, String line) {
		// TODO Auto-generated method stub
		String[] runnersData = line.split(" ");
		if (runnersData.length != 3) 
			return false;
		listNames.add(runnersData[0].trim());
		ThreadRunner runner = new ThreadRunner(
				runnersData[0].trim(),
				Integer.valueOf(runnersData[1].trim()), 
				Integer.valueOf(runnersData[2].trim()));
		Thread runnerThread = new Thread(runner);
		return true;
	}

	
}


