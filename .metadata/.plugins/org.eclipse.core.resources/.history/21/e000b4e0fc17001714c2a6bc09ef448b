import java.util.ArrayList;
import java.util.Scanner;




public class Marathon implements CallBackFromThread {

	private static final int exitCondition = 5;
	private ArrayList<Thread> listRunners = new ArrayList<Thread>();
	private ArrayList<String> listNames = new ArrayList<String>();
	private CallBackFromThread callBackFromThread = this;
	private Scanner sc = new Scanner(System.in);
	private boolean raceOver = false;
	private boolean raceStarted = false;
	private int choice;
	private String menu = "\n\nWelcome to the Marathon Race Runner Program\n\n1.  "
			+ "Derby database\n2.  "
			+ "XML file\n3.  "
			+ "Text file\n4.  "
			+ "Default two runners\n5.  "
			+ "Exit\n\n"
			+ "Enter your choice: ";
	private Thread mainThread;

	public Marathon() {
		mainThread = Thread.currentThread();
		choice = Validator.validChoice(sc, menu);
		while (choice != 5) {
			//choice = Validator.validChoice(sc, menu);
			if (choice < 5){
				switch(choice){
				case 1:
					readFromDb();
					break;
				case 2:
					readXmlFile();
					break;
				case 3:
					readTextFile();
					raceStarted= true;
					break;
				case 4:
					defaultTwoRunners();
					raceStarted = true;
					break;
				default:
					choice = Validator.validChoice(sc, menu);
					break;
				}
				try {
					Thread.sleep(Long.MAX_VALUE);
				} catch (InterruptedException e) {

					choice = Validator.validChoice(sc, menu);
				}
			}
		}
		System.out.println("\nThank you for using my Marathon Race Program");
		return;
	}

	private void readFromDb() {
		// TODO Auto-generated method stub
		DerbyReader derbyReader = new DerbyReader(listNames, listRunners, callBackFromThread);
		for (Thread runner : listRunners) {
			runner.start();
		}

	}


	private void readXmlFile() {
		// TODO Auto-generated method stub
		Validator.validXmlFile(sc, listNames, listRunners, callBackFromThread);
		for (Thread runner : listRunners) {
			runner.start();
		}

	}


	private void readTextFile() {
		// TODO Auto-generated method stub
		Validator.validFile(sc, listNames, listRunners, callBackFromThread);
		for (Thread runner : listRunners) {
			runner.start();
		}
	}


	private void defaultTwoRunners() {
		// TODO Auto-generated method stub
		listNames = new ArrayList<String>();
		listRunners = new ArrayList<Thread>();
		listNames.add("Tortoise");
		listNames.add("Hare");
		ThreadRunner tortoise = new ThreadRunner(listNames.get(0), 10, 0);
		Thread tortoiseThread = new Thread(tortoise);
		ThreadRunner hare = new ThreadRunner(listNames.get(1), 100, 90);
		Thread hareThread = new Thread(hare);
		listRunners.add(tortoiseThread);
		listRunners.add(hareThread);
		tortoise.delegate(callBackFromThread);
		hare.delegate(callBackFromThread);
		tortoiseThread.start();
		hareThread.start();
	}


	@Override
	public void finished(String name) {
		// TODO Auto-generated method stub
		for (Thread runner : listRunners) {
			runner.interrupt();
		}
		System.out.println("The race is over! The " + name + " is the winner.");
		for (String loser : listNames) {
			if (!loser.equals(name)) {
				System.out.println("\n" + loser + " : You beat me fair and square.");
			}
		}
		raceOver = true;
		mainThread.interrupt();
		raceStarted = false;
	}
}

